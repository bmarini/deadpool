#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'strscan'
require 'fileutils'

class DeadpoolGenerateConfig

  # include FileUtils

  def run
    @options = self.parse_command_line
    self.generate_config(@options)
  end

  def parse_command_line
    options      = OpenStruct.new
    options.path = '/etc/deadpool'

    @option_parser = OptionParser.new do |opts|
      opts.banner = "Usage: deadpool_generate_config [options]"

      opts.separator "Commands:"
      opts.on("-h", "--help", "Print this help message.") do |h|
        help
      end
      
      opts.separator "Options:"
      opts.on("--path=PATH", String, "path to create the config dir at (/etc/deadpool)") do |path|
        options.path = path
      end
    end

    # Parse and verify
    remaining_arguments = @option_parser.parse!

    unless remaining_arguments.empty?
      help "[#{remaining_arguments.join(' ')}] is not understood."
    end
    
    return options
  end

  def help(message=nil)
    unless message.nil?
      puts message
    end
    puts @option_parser.help
    exit 4
  end

  # mkdir path/config/pools
  #       path/config/environment.yml
  #       path/config/pools/example.yml
  # mkdir path/lib/deadpool/monitor
  #       path/lib/deadpool/monitor
  # mkdir path/lib/deadpool/failover_protocol
  #       path/lib/deadpool/failover_protocol
  def generate_config(options)
    path = options.path
    FileUtils.mkdir_p(File.join(path, 'config/pools'))
    FileUtils.mkdir_p(File.join(path, 'lib/deadpool/monitor'))
    FileUtils.mkdir_p(File.join(path, 'lib/deadpool/failover_protocol'))
    File.open File.join(path, 'config/pools/example.yml'), 'w' do |file|
      file.write <<-EOF
pool_name:         'example_database'
primary_host:      '10.1.2.3'
secondary_host:    '10.2.3.4'
check_interval:    1
max_failed_checks: 10

# There can be only one monitor per pool at this time.  The deadpool system
# defines no rules for the monitor configuration except that it is called
# monitor_config: and has monitor_class: defined at the base level.  
# All other configuration variables are plugin specific.
monitor_config:
  monitor_class: Mysql
  nagios_plugin_path: '/usr/lib/nagios/plugins'

# There can be as many Failover Protocols as you want and you can use 
# the same plugin multiple times.  The deadpool defines no riles for the 
# failover protocol config except that it be an array element of 
# failover_protocol_configs and defines protocol_class at it's base.  The rest
# of the configuration is specific to the failover protocol.
failover_protocol_configs:
  - protocol_class: EtcHosts
    script_path: 'etc_hosts_switch'
    service_host_name: 'master.mysql.example.project.client'
    username: 'deadpool'
    password: 'p4ssw0rd'
    use_sudo: 1
    client_hosts:
      - '10.3.4.5'   # app server 1 (web server)
      - '10.4.5.6'   # app server 2 (web server)

  - protocol_class: ExecRemoteCommand
    test_command: '/etc/init.d/nginx status'
    exec_command: '/etc/init.d/nginx restart'
    username: 'deadpool'
    password: 'p4ssw0rd'
    use_sudo: 1
    client_hosts:
      - '10.3.4.5'   # app server 1 (web server)
      - '10.4.5.6'   # app server 2 (web server)
      EOF
    end
    File.open File.join(path, 'config/environment.yml'), 'w' do |file|
      file.write <<-EOF
# log_path: '/var/log/deadpool.log'
# log_level: INFO
# system_check_interval: 30
# admin_hostname: 'localhost'
# admin_port: 5507
      EOF
    end
  end

end

DeadpoolGenerateConfig.new.run




